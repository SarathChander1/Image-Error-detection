# -*- coding: utf-8 -*-
"""DSAF.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYwQthQO6KKNjn_AS4oh16bkwJPTXMjG
"""

import cv2
import numpy as np

def is_image_focused(image_path, threshold=1000):
    # Load the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if image is None:
        raise Exception("Unable to load the image.")

    # Compute the 2D Fourier Transform
    f_transform = np.fft.fft2(image)
    f_transform_shifted = np.fft.fftshift(f_transform)
    magnitude_spectrum = np.log(np.abs(f_transform_shifted) + 1)

    # Calculate the variance of the magnitude spectrum
    variance = np.var(magnitude_spectrum)

    # Determine if the image is focused or not based on the variance
    if variance > threshold:
        return True
    else:
        return False

if __name__ == "__main__":
    image_path = "/content/NOISY_IMGAE.jpg"  # Replace with the path to your image
    focus_threshold = 1000  # Adjust this threshold as needed

    is_focused = is_image_focused(image_path, focus_threshold)

    if is_focused:
        print("The image does not have noise.")
    else:
        print("The image has noise.")

import cv2

  import matplotlib.pyplot as plt

  # Load the noisy image
  noisy_image = cv2.imread(r'/content/NOISY_IMGAE.jpg')  # Correct the image path

  # Apply Gaussian blur for denoising
  Gaussian_image = cv2.GaussianBlur(noisy_image, (5, 5), 0)

  # Display the noisy and denoised images using Matplotlib
  plt.figure(figsize=(10, 5))
  plt.subplot(1, 2, 1)
  plt.title('Noisy Image')
  plt.imshow(cv2.cvtColor(noisy_image, cv2.COLOR_BGR2RGB))
  plt.axis('off')

  plt.subplot(1, 2, 2)
  plt.title('Denoised Image')
  plt.imshow(cv2.cvtColor(Gaussian_image, cv2.COLOR_BGR2RGB))
  plt.axis('off')

  plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage

# Load the noisy image (replace 'noisy_image.png' with your image file)
noisy_image = plt.imread(r'/content/NOISY_IMGAE.jpg')

# Apply a Gaussian filter to reduce the noise
filtered_image = ndimage.gaussian_filter(noisy_image, sigma=1.5)  # Adjust sigma as needed

# Apply a Gaussian filter to the denoised image
denoised_filtered_image = ndimage.gaussian_filter(filtered_image, sigma=1.5)  # Adjust sigma as needed

# Create subplots to display the original noisy image, the filtered image, and the denoised filtered image
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(noisy_image, cmap='gray')
plt.title('Noisy Image')

plt.subplot(1, 3, 2)
plt.imshow(filtered_image, cmap='gray')
plt.title('Filtered Image')

plt.subplot(1, 3, 3)
plt.imshow(denoised_filtered_image, cmap='gray')
plt.title('Denoised Filtered Image')

# Show the plots
plt.tight_layout()
plt.show()

import cv2
from matplotlib import pyplot as plt

# Load an image from the Colab environment (after uploading or mounting)
image = cv2.imread(r'/content/NOISY_IMGAE.jpg')  # Replace "image.jpg" with the actual filename

if image is not None:
    # Display the image using matplotlib
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))  # Convert BGR to RGB
    plt.axis('off')  # Turn off axis labels
    plt.show()
else:
    print("Image not found or could not be loaded.")

import cv2
import numpy as np
import matplotlib.pyplot as plt

def speckle_noise_correction(image_path, output_path, kernel_size=3):
    # Read the image
    img = cv2.imread(image_path, 0)  # Read the image as grayscale

    if img is None:
        print(f"Error: Unable to read the image from the path: {image_path}")
        return

    # Apply median filter for speckle noise correction
    median_filtered = cv2.medianBlur(img, kernel_size)

    # Save the result
    cv2.imwrite(output_path, median_filtered)

    # Display the original and corrected images using Matplotlib
    plt.figure(figsize=(10, 5))

    # Original Image
    plt.subplot(1, 2, 1)
    plt.imshow(img, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    # Speckle Noise Corrected Image
    plt.subplot(1, 2, 2)
    plt.imshow(median_filtered, cmap='gray')
    plt.title('Speckle Noise Corrected')
    plt.axis('off')

    plt.show()

# Example usage
input_image_path = r'/content/NOISY_IMGAE.jpg'  # Replace with the path to your noisy image
output_image_path = 'path/to/save/corrected_image.jpg'
speckle_noise_correction(input_image_path, output_image_path, kernel_size=3)

import numpy as np
import matplotlib.pyplot as plt
from scipy import fftpack
from scipy import ndimage

# Load the image
image = plt.imread(r'/content/NOISY_IMGAE.jpg')

# Convert the image to grayscale
gray_image = np.mean(image, axis=2)

# Perform FFT on the image
fft_image = fftpack.fft2(gray_image)

# Define the bandwidth for noise reduction
bandwidth = 10

# Apply bandwidth limitation noise
rows, cols = gray_image.shape
crow, ccol = rows // 2, cols // 2
fft_image[crow - bandwidth:crow + bandwidth, ccol - bandwidth:ccol + bandwidth] = 0

# Perform inverse FFT to get the filtered image
filtered_image = np.abs(fftpack.ifft2(fft_image))

# Display the original and filtered images
plt.figure(figsize=(12, 6))
plt.subplot(121), plt.imshow(gray_image, cmap='gray')
plt.title('Original Image'), plt.axis('off')
plt.subplot(122), plt.imshow(filtered_image, cmap='gray')
plt.title('Filtered Image'), plt.axis('off')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

def quantization_noise_reduction(image_path, output_path, sigma=1.5):
    # Read the image
    img = cv2.imread(image_path)

    # Check if the image is loaded successfully
    if img is None:
        print(f"Error: Unable to read the image from the path: {image_path}")
        return

    # Apply Gaussian smoothing for quantization noise reduction
    smoothed_image = cv2.GaussianBlur(img, (0, 0), sigma)

    # Save the result
    cv2.imwrite(output_path, smoothed_image)

    # Display the original and smoothed images using Matplotlib
    plt.figure(figsize=(10, 5))

    # Original Image
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title('Original Image')
    plt.axis('off')

    # Smoothed Image
    plt.subplot(1, 2, 2)
    plt.imshow(cv2.cvtColor(smoothed_image, cv2.COLOR_BGR2RGB))
    plt.title('Smoothed Image')
    plt.axis('off')

    plt.show()

# Example usage
input_image_path = r'/content/NOISY_IMGAE.jpg'  # Replace with the path to your image
output_image_path = '/content/output_smoothed_image.jpg'  # Specify the desired output path
quantization_noise_reduction(input_image_path, output_image_path, sigma=1.5)

